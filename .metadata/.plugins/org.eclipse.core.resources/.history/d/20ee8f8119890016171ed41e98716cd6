package treesNgraphs;

public class BinaryTree {

	public static void main(String[] args) {
		System.out.println(recursion(4));
	}

	private class Node {
		private int data;
		private Node left;
		private Node right;

		public Node(int n) {
			this.data = n;
		}

	}
	
	// Find Height
	
	public int height(Node root){
		if (root == null){
			return 0;
		}
		
		int leftHeight = height(root.left);
		int rightHeight = height(root.right);
		
		return 1 + Math.max(leftHeight, rightHeight);
	}
	
	// Find total elements;
	public int size(Node root){
		if (root == null){
			return 0;
		}
		
		int leftHeight = size(root.left);
		int rightHeight = size(root.right);
		
		return leftHeight + rightHeight + 1;
		
		
		
	}

	// 4.1
	public boolean isBalanced(Node n) {
		if (balancedHeight(n) > 1)
			return true;
		return false;
	}

	private int balancedHeight(Node n) {
		if (n == null)
			return 0;
		int h1 = balancedHeight(n.left);
		int h2 = balancedHeight(n.right);

		if (h1 == -1 || h2 == -1)
			return -1;
		if (Math.abs(h1 - h2) > 1)
			return -1;

		if (h1 >= h2)
			return h1 + 1;
		return h2 + 1;
	}

	/*
	 * 4.3 we first find the middle of the array left of the tree will be less
	 * than the array right will be bigger, perform divide and conquer Similar
	 * to merge sort
	 */

	private Node minimalBST(int[] arr, int start, int end) {

		if (end < start)
			return null;

		int mid = (end + start) / 2;

		Node n = new Node(arr[mid]);
		n.left = minimalBST(arr, start, mid - 1);
		n.right = minimalBST(arr, mid + 1, end);
		
		return n;
	}
	
	
	// 4.5 Check if BT is a BST
	
	private boolean isBST(Node n){
		return isBST(n, Integer.MIN_VALUE, Integer.MAX_VALUE);
	}
	
	private boolean isBST(Node n, int min, int max){
		if (n == null){
			 return true;
		}
		
		if(n.data <= min || n.data > Integer.MAX_VALUE){
			 return false;
		}
		
		// Will check all the left children until its null then it wil go up
		if (!isBST(n.left, min , n.data) || !isBST(n.right, n.data, max)){
			 return false;
		}
		
		return true;
	}
	
	

	static int recursion(int n) {
		if (n == 1)
			return 1;
		return n * recursion(n - 1);
	}

}
