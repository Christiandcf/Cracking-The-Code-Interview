package treesNgraphs;

public class BinaryTree {

	public static void main(String[] args) {
		System.out.println(recursion(4));
	}

	private class Node {
		private int data;
		private Node left;
		private Node right;
		private Node parent;

		public Node(int n) {
			this.data = n;
		}

	}

	// Find Height

	public int height(Node root) {
		if (root == null) {
			return 0;
		}

		int leftHeight = height(root.left);
		int rightHeight = height(root.right);

		return 1 + Math.max(leftHeight, rightHeight);
	}

	// Find total elements;
	public int size(Node root) {
		if (root == null) {
			return 0;
		}

		int leftHeight = size(root.left);
		int rightHeight = size(root.right);

		return leftHeight + rightHeight + 1;

	}

	// 4.1
	public boolean isBalanced(Node n) {
		if (balancedHeight(n) > 1)
			return true;
		return false;
	}

	private int balancedHeight(Node n) {
		if (n == null)
			return 0;
		int h1 = balancedHeight(n.left);
		int h2 = balancedHeight(n.right);

		if (h1 == -1 || h2 == -1)
			return -1;
		if (Math.abs(h1 - h2) > 1)
			return -1;

		if (h1 >= h2)
			return h1 + 1;
		return h2 + 1;
	}

	/*
	 * 4.3 we first find the middle of the array left of the tree will be less
	 * than the array right will be bigger, perform divide and conquer Similar
	 * to merge sort
	 */

	private Node minimalBST(int[] arr, int start, int end) {

		if (end < start)
			return null;

		int mid = (end + start) / 2;

		Node n = new Node(arr[mid]);
		n.left = minimalBST(arr, start, mid - 1);
		n.right = minimalBST(arr, mid + 1, end);

		return n;
	}

	// 4.5 Check if BT is a BST

	private boolean isBST(Node n) {
		return isBST(n, Integer.MIN_VALUE, Integer.MAX_VALUE);
	}

	private boolean isBST(Node n, int min, int max) {
		if (n == null) {
			return true;
		}

		if (n.data <= min || n.data > max) {
			return false;
		}

		// Will check all the left children until its null then it wil go up
		return isBST(n.left, n.data, max) && isBST(n.right, min, n.data);
	}

	// 4.6 find the next node of a given node in a BST 15 --> 16

	public Node inOrderSuccessor(Node n) {
		if (n == null)
			return null;

		if (n.right != null) {
			return leftMostChild(n.right);
		} else {
			Node q = n;
			Node x = q.parent;
			while (x != null && x.left != q) {
				q = x;
				x = x.parent;
			}
			return x;
		}
	}

	public Node leftMostChild(Node n) {
		if (n == null)
			return null;

		while (n.left != null) {
			n = n.left;
		}

		return null;
	}

	// 4.7 Common ancestor of two Nodes

	public Node lca(Node root, Node n1, Node n2) {
		if (root == null)
			return null;
		if (root == n1 || root == n2)
			return root;

		Node left = lca(root.left, n1, n2);
		Node right = lca(root.right, n1, n2);

		if (left != null && right != null)
			return root;

		if (left == null && right == null)
			return null;

		return left != null ? left : right;

	}
	
	// 4.8 Check if tree is a sub tree
	
	public boolean containsTree(Node t1, Node t2){
		if (t2 == null)
			return true; // empty tree is always a subtree
		return subTree(t1,t2);
	}
	
	public boolean subTree(Node r1, Node r2){
		if(r1 == null)
			return false;
		
		if (r1.data == r2.data){
			if (matchTree(r1,r2))
				return true;
		}
		
		return (subTree(r1.left, r2) || subTree(r1.right, r2));
	}
	
	public boolean matchTree(Node r1, Node r2){
		if (r2 == null && r1 == null)
			return true; //both are empty
		
		if (r1 == null || r2 == null)
			return false;
		
		if (r1.data != r2.data)
			return false;
		
		return (matchTree(r1.left, r2.left) && matchTree(r1.right, r2.right));
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	static int recursion(int n) {
		if (n == 1)
			return 1;
		return n * recursion(n - 1);
	}

}
