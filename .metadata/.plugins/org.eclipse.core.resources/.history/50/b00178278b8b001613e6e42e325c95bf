package AsixthEdition;

import java.util.HashMap;

import AsixthEdition.LinkedList.Node;

public class LinkedList {
	public static class Node {
		Node next = null;
		int data;

		public Node(int d) {
			data = d;
		}

		public void append(int d) {
			Node end = new Node(d);
			Node n = this;

			while (n.next != null) {
				n = n.next;
			}
			n.next = end;
		}

		public static Node delete(Node head, int d) {
			Node n = head;
			
			if(n.data == d){
				return head.next;
			}

			while (n.next != null) {
				if (n.next.data == d) {
					n.next = n.next.next;
					return head;
				}
				n = n.next;
			}

			return head;
		}
		
		public static void display(Node head){
			while(head != null){
				System.out.print(head.data);
				if(head.next != null){
					System.out.print(" --> ");
				}
				head = head.next;
			}
		}

		// 2.1 Remove Duplicated unsorted List
		public static Node removeDups(Node head){
			Node n = head;
			int i = 0;
			HashMap<Node, Integer> map = new HashMap<Node, Integer>();
			while(n != null){
				map.put(n, i);
				i++;
				n = n.next;
			}
			
			Node k = head;
			
			while(k!=null){
				if(map.containsValue(k.data)){
					delete(head, k.data);
				}
				k = k.next;
			}
			
			return head;
		}
	}
	
	
	
	

}
